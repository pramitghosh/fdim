[{"path":"https://pramitghosh.github.io/sameSVD/articles/points.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Box-Counting dimension of point datasets","text":"vignette illustrates use package calculating Box-Counting Dimension point features sf objects geometry type MULTIPOINT. sf objects geometry type POINT, Box-Counting dimension calculated (trivially) equal 0.","code":""},{"path":"https://pramitghosh.github.io/sameSVD/articles/points.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Box-Counting dimension of point datasets","text":"following examples, Box-Counting Dimension calculated arbitrary MULTIPOINT features theoretically known fractal dimensions well real-world datasets.","code":"# Loading pre-requisite packages library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE library(sameSVD)"},{"path":[]},{"path":"https://pramitghosh.github.io/sameSVD/articles/points.html","id":"multipoint-feature-with-2-points","dir":"Articles","previous_headings":"Examples > Features with known Box-Counting dimensions","what":"MULTIPOINT feature with 2 points","title":"Box-Counting dimension of point datasets","text":"two_points following class memberships  Box-Counting dimension simple feature can calculated follows  linear regression gives perfectly horizontal best-fit line indicating Box-Counting dimension 0, expected.","code":"two_points = st_sf(st_sfc(c(st_point(c(1, 2)), st_point(c(3, 4))), crs = 3857)) two_points #> Simple feature collection with 1 feature and 0 fields #> Geometry type: MULTIPOINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 3 ymax: 4 #> Projected CRS: WGS 84 / Pseudo-Mercator #>   st_sfc.c.st_point.c.1..2....st_point.c.3..4.....crs...3857. #> 1                                   MULTIPOINT ((1 2), (3 4)) class(two_points) #> [1] \"sf\"         \"data.frame\" plot(st_geometry(two_points), axes = TRUE) bcd(two_points, l = seq(0.1, 1, 0.1), plot = TRUE) #> Generating grids... #> Counting intersecting cells... #> Performing simple linear regression to determine Box-Counting dimension... #> Plotting requested... #> Plotting best-fit line... #> [1] 0"},{"path":"https://pramitghosh.github.io/sameSVD/articles/points.html","id":"sierpiński-triangle","dir":"Articles","previous_headings":"Examples > Features with known Box-Counting dimensions","what":"Sierpiński triangle","title":"Box-Counting dimension of point datasets","text":"Sierpiński triangle extensively studied fractal theoretically known fractal (Hausdorff) dimension \\(log_2(3) = 1.5850\\). example, Sierpiński triangle generated using randomized algorithm Box-Counting Dimension calculated. following figure shows randomized algorithm works creates said fractal using discrete points. Ederporto - work, CC -SA 4.0, Link Sierpiński triangle generated follows. generated Sierpiński triangle converted sf MULTIPOINT object CRS EPSG:3857.  Box-Counting Dimension figure calculated using bcd() illustrated .  regression gives Box-Counting dimension ~1.59 close theoretical value.","code":"# Methods to generate a Sierpiński triange new_points = function(points, last_point, last_vertex = NA) {   pt_row = sample(1:dim(points)[1], 1)   if(!is.na(last_vertex))   {     while(pt_row == last_vertex)       pt_row = sample(1:dim(points)[1], 1)   }   mid_pt = c((last_point[1] + points[pt_row, 1])/2, (last_point[2] + points[pt_row, 2])/2)   list(matrix(mid_pt, nrow = 1), pt_row) } # Define initial variables n = 3 #Create a 3-sided polygon (triangle) points = matrix(data = c(c(0,0), c(1,0), c(cos(pi/3), sin(pi/3))), ncol = 2, byrow = TRUE, dimnames = list(LETTERS[1:n], c(\"x\", \"y\"))) #Define vertices of triangle last_pt = matrix(data = c(0,0), nrow = 1) #Choose a random starting point max_pts = 20000  # Generate coordinates sierpinski = list() length(sierpinski) = max_pts for(i in 1:max_pts){   last_pt = new_points(points, last_pt)[[1]]   sierpinski[[i]] = last_pt } sierpinski_pts = matrix(unlist(sierpinski), ncol = 2, byrow = TRUE) (sierpinski_sf = st_sf(st_sfc(st_multipoint(sierpinski_pts), crs = 3857))) #> Simple feature collection with 1 feature and 0 fields #> Geometry type: MULTIPOINT #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 0 xmax: 0.9988957 ymax: 0.8647843 #> Projected CRS: WGS 84 / Pseudo-Mercator #>   st_sfc.st_multipoint.sierpinski_pts...crs...3857. #> 1                    MULTIPOINT ((0 0), (0.25 0.... plot(sierpinski_sf, axes = TRUE) bcd(sierpinski_sf, l = seq(0.01, 0.1, 0.01), plot = TRUE) #> Generating grids... #> Counting intersecting cells... #> Performing simple linear regression to determine Box-Counting dimension... #> Plotting requested... #> Plotting best-fit line... #> [1] 1.593836"},{"path":"https://pramitghosh.github.io/sameSVD/articles/using_fdim.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Using sameSVD","text":"vignette aims providing overview calculation fractal dimension using box-counting technique carried proceeds give example.","code":""},{"path":"https://pramitghosh.github.io/sameSVD/articles/using_fdim.html","id":"calculating-the-box-counting-dimension","dir":"Articles","previous_headings":"","what":"Calculating the Box-Counting Dimension","title":"Using sameSVD","text":"sameSVD package used calculating fractal dimension simple feature geometry type POLYGON using box-counting technique. done performing following important steps: Importing simple feature object class sf. imported simple feature spherical coordinates (\\(\\mathbb{S}^2\\)), projected conformally using Mercator projection (EPSG:3857) referenced using Cartesian coordinate reference system (\\(\\mathbb{R}^2\\)). grid varying grid sizes CRS simple feature overlayed feature. default sequence cell cizes number cells intersecting feature counted grids cell size recorded inverse cell size. count number boxes (log-transformed) plotted reciprocal cell-size (log-transformed). linear regression performed find best-fit line log-log scatterplot. slope best-fit line gives box-counting dimension feature.","code":"seq(10000, 100000, 10000) #>  [1] 1e+04 2e+04 3e+04 4e+04 5e+04 6e+04 7e+04 8e+04 9e+04 1e+05"},{"path":"https://pramitghosh.github.io/sameSVD/articles/using_fdim.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Using sameSVD","text":"sameSVD allows import simple feature two ways. feature stored external file, may imported using dsn layer arguments function bcd() along arguments sf::st_read(). plot = TRUE argument plots scatterplot shows best-fit line obtained simple linear regression. default argument plot FALSE.  Alternatively, simple feature already available user envrionment, can passed bcd() argument x. sequence cell-sizes tested can optionally modified explicitly passing argument l bcd().","code":"library('sameSVD') mp = import_SVD(dsn = system.file(package = \"sameSVD\"), layer = \"madhya_pradesh\") #> Reading layer `madhya_pradesh' from data source  #>   `/home/runner/work/_temp/Library/sameSVD' using driver `ESRI Shapefile' #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 74.03467 ymin: 21.07531 xmax: 82.80778 ymax: 26.87437 #> Geodetic CRS:  WGS 84 #>  #> Note: Coordinates in Lat/Long; reprojecting to EPSG:3857... bcd(k = mp, l = seq(50000, 100000, 10000), plot = TRUE) #> Generating grids... #> Counting intersecting cells... #> Performing simple linear regression to determine Box-Counting dimension... #> Plotting requested... #> Plotting best-fit line... #> [1] 1.776026 library('rnaturalearth') deutschland = import_SVD(ne_countries(scale = \"medium\", country = \"Germany\", returnclass = \"sf\")) #> Note: Coordinates in Lat/Long; reprojecting to EPSG:3857... bcd(deutschland, l = seq(10000, 100000, 15000), plot = TRUE) #> Generating grids... #> Counting intersecting cells... #> Performing simple linear regression to determine Box-Counting dimension... #> Plotting requested... #> Plotting best-fit line... #> [1] 1.893884"},{"path":"https://pramitghosh.github.io/sameSVD/articles/using_fdim.html","id":"internal-working","dir":"Articles","previous_headings":"Example","what":"Internal working","title":"Using sameSVD","text":"code executed, deutschland stores sf polygon representing Germany. bcd() called creates sf objects form grids (comprising polygons) covering deutschland. Additionally, since CRS deutschland latitude longitude, transforms EPSG:3857. number grids created length vector l passed bcd(). grid made square polygons side-lengths l. following figures show square grids overlayed top deutschland side-lengths 40000m 70000m, illustraion.  number cells intersecting deutschland, say \\(N\\), counted grid cells side-length \\(l\\). simple linear regression performed \\(log(N)\\) dependent variable \\(-log(\\frac{1}{l})\\). coefficient dependent variable .e., slope best-fit line gives Box-Counting Dimension. example, number intersecting cells cell sizes 40000m 70000m respectively. Thus, dependent variable \\(N\\) independent variable \\(-log(\\frac{1}{l})\\) slope best-fit line case slope line joining points equal close slope calculated using bcd() earlier document.","code":"library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE deutschland = st_transform(deutschland, 3857) par(mfrow=c(1,2))  plot(st_geometry(deutschland), col = \"wheat\", axes = TRUE, main = \"Cell size = 40000m\", xlab = \"Easting (m)\", ylab = \"Northing (m)\") plot(st_make_grid(deutschland, cellsize = 40000), add = TRUE)  plot(st_geometry(deutschland), col = \"wheat\", axes = TRUE, main = \"Cell size = 70000m\", xlab = \"Easting (m)\", ylab = \"Northing (m)\") plot(st_make_grid(deutschland, cellsize = 70000), add = TRUE) par(mfrow = c(1,1)) # For cell size = 40000m (n1 = length(st_intersection(st_geometry(deutschland), st_make_grid(deutschland, cellsize = 40000)))) #> [1] 652 # For cell size = 70000m (n2 = length(st_intersection(st_geometry(deutschland), st_make_grid(deutschland, cellsize = 70000)))) #> [1] 233 (y = log(c(n1, n2))) #> [1] 6.480045 5.451038 (x = -log(c(1/40000, 1/70000))) #> [1] 10.59663 11.15625 -(y[2] - y[1])/(x[2] - x[1]) #> [1] 1.838772"},{"path":"https://pramitghosh.github.io/sameSVD/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pramit Ghosh. Author, maintainer.","code":""},{"path":"https://pramitghosh.github.io/sameSVD/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ghosh P (2024). sameSVD: Similarity Affinity Measures Spatial Vector Data. R package version 0.2.0, https://pramitghosh.github.io/sameSVD/, https://github.com/pramitghosh/sameSVD.","code":"@Manual{,   title = {sameSVD: Similarity and Affinity Measures for Spatial Vector Data},   author = {Pramit Ghosh},   year = {2024},   note = {R package version 0.2.0, https://pramitghosh.github.io/sameSVD/},   url = {https://github.com/pramitghosh/sameSVD}, }"},{"path":"https://pramitghosh.github.io/sameSVD/index.html","id":"samesvd","dir":"","previous_headings":"","what":"Similarity and Affinity Measures for Spatial Vector Data","title":"Similarity and Affinity Measures for Spatial Vector Data","text":"Author: Pramit Ghosh","code":""},{"path":"https://pramitghosh.github.io/sameSVD/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Similarity and Affinity Measures for Spatial Vector Data","text":"sameSVD stands Similarity Affinity Measures Spatial Vector Data package still development many objectives package yet implemented conceptualized. objective package establish (required) implement measures (self-)similarity (self-)affinity spatial vector data represented accordance Simple Features (officially Simple Features Access) specifications, standardized OGC ISO.","code":""},{"path":[]},{"path":[]},{"path":"https://pramitghosh.github.io/sameSVD/index.html","id":"dependencies","dir":"","previous_headings":"Installation","what":"Dependencies","title":"Similarity and Affinity Measures for Spatial Vector Data","text":"order install package, following packages required pre-requisite. sf addition, following packages also suggested. mostly required knit vignettes run certain tests. rnaturalearth rnaturalearthdata rgeos can installed running following command R:","code":"install.packages(c(\"sf\", \"rnaturalearth\", \"rnaturalearthdata\", \"rgeos\"))"},{"path":"https://pramitghosh.github.io/sameSVD/index.html","id":"installing-samesvd","dir":"","previous_headings":"Installation","what":"Installing sameSVD","title":"Similarity and Affinity Measures for Spatial Vector Data","text":"package can installed follows","code":"install.packages(\"remotes\") library(remotes) install_github(\"pramitghosh/sameSVD\")"},{"path":"https://pramitghosh.github.io/sameSVD/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Similarity and Affinity Measures for Spatial Vector Data","text":"Box-Counting dimension can calculated using bcd(). following example illustrates usage. detailed illustration along internal working can found vignettes.","code":"library(sameSVD) library(rnaturalearth) deutschland = ne_countries(scale = \"medium\", country = \"Germany\", returnclass = \"sf\") bcd(deutschland, plot = TRUE)"},{"path":"https://pramitghosh.github.io/sameSVD/reference/bcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the box-counting dimension of a polygon — bcd","title":"Calculates the box-counting dimension of a polygon — bcd","text":"Calculates self-similar self-affine fractal dimension. argument `l` numeric vector, self-similarity calculated. matrix, self-affinity calculated returns global self-affine fractal dimension. `affine_local` set `TRUE`, global local self-affine fractal dimensions returned.","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/bcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the box-counting dimension of a polygon — bcd","text":"","code":"bcd(k, l, plot, ...)  # S3 method for self_similarity bcd(k, l = seq(10000, 1e+05, 10000), plot = FALSE, ...)  # S3 method for self_affinity bcd(   k,   l = matrix(rep(seq(10000, 1e+05, 10000), 2), ncol = 2),   plot = FALSE,   anisotropy = 1.25,   affine_local = FALSE,   ... )"},{"path":"https://pramitghosh.github.io/sameSVD/reference/bcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the box-counting dimension of a polygon — bcd","text":"k Spatial Vector data `sf` object l Numeric matrix; represents sequence cell side lengths used generate grid. Numeric value represents length side single square box grid calculate self-similarity; matrix columns represents length width rectangular cells calculating self-affinity. plot Logical; true, log-log plot number cells used cover polygon vs cell size plotted ... Arguments `anisotropy` `affine_local` passed `bcd.self_affinity()` anisotropy Ratio directional scaling exponents `v_x/v_y` (`v_x > v_y`) beyond feature considered exhibit self-affinity affine_local Whether local self-affine fractal dimension calculated","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/bcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the box-counting dimension of a polygon — bcd","text":"numeric vector representing box-counting dimension spatial feature, `k`.","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/count_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts the number of grid cells required to cover the shape polygon — count_cells","title":"Counts the number of grid cells required to cover the shape polygon — count_cells","text":"Counts number grid cells required cover shape polygon","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/count_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts the number of grid cells required to cover the shape polygon — count_cells","text":"","code":"count_cells(grid, f)"},{"path":"https://pramitghosh.github.io/sameSVD/reference/count_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts the number of grid cells required to cover the shape polygon — count_cells","text":"grid grid object class sfc f sf object grid based ","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/count_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts the number of grid cells required to cover the shape polygon — count_cells","text":"number grid cells grid required cover polygon f","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/import_SVD.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Spatial Vector Data — import_SVD","title":"Import Spatial Vector Data — import_SVD","text":"Import Spatial Vector Data","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/import_SVD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Spatial Vector Data — import_SVD","text":"","code":"import_SVD(x = NULL, dsn, layer, ...)"},{"path":"https://pramitghosh.github.io/sameSVD/reference/import_SVD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Spatial Vector Data — import_SVD","text":"x Object class `sf` dsn Data source name directory file located layer Layer name filename file converted ... arguments passed `sf::st_read()` together `dsn` `layer`","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/import_SVD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Spatial Vector Data — import_SVD","text":"Object class `sf`. CRS original data Long/Lat, transformed EPSG:3857","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/import_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for `sf::st_read()`` — import_sf","title":"Wrapper for `sf::st_read()`` — import_sf","text":"Wrapper `sf::st_read()``","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/import_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for `sf::st_read()`` — import_sf","text":"","code":"import_sf(dsn, layer, ...)"},{"path":"https://pramitghosh.github.io/sameSVD/reference/import_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for `sf::st_read()`` — import_sf","text":"dsn Data source name directory file located layer Layer name filename file converted ... arguments passed `st_read()`","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/import_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for `sf::st_read()`` — import_sf","text":"object class sf","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/overlay_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create grids for polygons supplied as arguments — overlay_grid","title":"Create grids for polygons supplied as arguments — overlay_grid","text":"Create grids polygons supplied arguments","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/overlay_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create grids for polygons supplied as arguments — overlay_grid","text":"","code":"overlay_grid(cs, f)"},{"path":"https://pramitghosh.github.io/sameSVD/reference/overlay_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create grids for polygons supplied as arguments — overlay_grid","text":"cs cell size grid created. set side-length x- y-directions f sf object based grid created","code":""},{"path":"https://pramitghosh.github.io/sameSVD/reference/overlay_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create grids for polygons supplied as arguments — overlay_grid","text":"object class `sfc` square polygons","code":""}]
